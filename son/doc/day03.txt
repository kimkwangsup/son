# day03

컨트롤러 함수의 반환값
==> 
	MVC 패턴에서는 컨트롤러의 역할이 끝나면 뷰를 호출한다.
	컨트롤러는 자신이 아는 데이터(Model)을 이용해서 구성할 뷰를 선택해야 한다.
	
	뷰 선택하는 방법 : 함수의 반환값
		
		1. String
			반환값을 문자열로 반환해서 뷰를 지정하는 방법
			이때 응답 방식은 
				Forward
			방식으로 처리된다.
			
			리다이렉트로 처리해야 할 경우는
				"redirect:/url"
			의 형태로 문자열을 반환해야 한다.
			
		2. void
		==> 이 경우는 요청내용을 이용해서 뷰를 선택하게 된다.
			
			예 ]
				abc.son
				으로 요청했는데 처리함수의 반환값이  void 인 경우는
					abc.jsp 
				파일을 이용해서 응답하게 된다.
		
		3. ModelAndView
			==> ModelAndView 클래스는 모델(데이터)과 뷰를 동시에 기억할 수 있는 특징을 가진 클래스
				
				장점 ]
					가공된 모델(데이터)과 뷰를 한개의 객체를 이용해서 사용할 수 있다.
		
		4. Java Class type(VO 클래스, Map , List, ... ) 
			: 예외적으로 자바클래스를 JSON 문서로 전환해서 응답할 때 사용하는 방식
				이때 반드시 @ResponseBody 라는 Annotation 이 붙여져야한다. 
			
			{
				"키값": "데이터",
				....
			}
			
---------------------------------------------------------------------------------------------------------

	요청처리함수의 매개변수
	
	==> 작성시 특별한 규칙이 있는 것은 아니고
		컨트롤러 작업에서 필요한 데이터가 발생하면
		등록만 해주면 스프링이 변수에 입력해준다.
		
		주의사항 ]
			웹 페이지에서 파라미터로 데이터를 컨트롤러에 전송할 경우
			파라미터의 키값과 매개변수의 변수이름은 동일해야 채워준다.
		
		참고 ]
			스프링에서는 파라미터에 VO를 이용해서 데이터를 전달받을 수 있다.
			
				장점 ]
					전달되는 데이터가 많은 경우
					request 객체에서 파라미터를 꺼내게 되면
					코드가 길어지고 복잡해진다
					이 문제를 해결하기 위해서 VO 클래스를 매개변수로 만들어 두면
					파라미터의 키값과 같은 VO 클래스의 변수에 데이터를 채워주게 된다.
					
					이때 변수에 직접 접근해서 채우는 것이 아니고
					setXXX() 함수를 자동호출해서 채우게 되므로
					VO 클래스를 제작할 때는 반드시
						변수의 접근지정자는 private로 은닉화시키고
						데이터를 꺼내거나 셋팅할 수 있는
						getter/setter 함수를 만들어줘야 한다.
						
--------------------------------------------------------------------------------------------------------------

자동 의존 주입
==> <bean> 처리된 클래스를 필요로 하는 곳에 annotation 을 이용해서
	자동적으로 생성된 클래스를 사용 가능하도록 하는 작업
	
	1. @Autowired
	==> 모든 bean 처리된 클래스를 자동으로 찾아서 주입하는 어노테이션
	
		스프링 전용
			
		참고 ]
			@Inject : 자바 어플리케이션 사용할 수 있는 것
						스프링에서도 역시 사용 가능하다
						
	2. @Qualifier
	==> 동일한 클래스가 여러번 빈 처리된 경우
		특정 객체를 선택하도록 하는 어노테이션
		
	3. @Resource
	==> 자동 주입할 객체를 지정해서 주입하는 어노테이션
	
	참고 ]
		@Autowired 를 사용할 수 있는 부분
		
			1. 변수를 선언하는 시점에서 사용할 수 있다.
			2. 생성자 함수에서 사용할 수 있다.
			3. set 함수에서 사용할 수 있다.
			
		어느부분에 사용하든지 필요한 클래스가 자동 의존 주입 되는 것은
		동일한 효과가 있다.
		
	참고 ]
		bean 등록 방법
		
			서블릿 xml 파일에서
			<bean 		id="빈아이디"	class="빈처리할 클래스 경로" />
			
			
			<bean		id="빈아이디"	class="빈처리할 클래스 경로'>
				<qualifier value="???" />			
			</bean>
			
			<bean		id="빈 다른 아이디"	class="빈처리할 클래스 경로">
			
	참고 ]
		@Autowired를 사용한 경우
		자동으로 빈등록된 빈을 찾아서 자동주입을 해주게 된다
		빈을 찾지 못하게 되는 경우는 에러가 발생한다.
	
	@Resource 에 의한 자동의존 주입
	==> @Autowired보다는 강력하지 않고
		빈처리 된 것 중에서 특정 빈을 선택해서 의존주입할 수 있는 방법
		
	형식 ]
			
		@Resource(name="빈아이디")
		변수선언
		
	참고 ]
		자동 의존 주입 원리
			1. name 에 지정한 값과 동일한 id를 가진 빈을 찾아서 자동의존주입을 하게 된다.
			2. 만약 동일한 아이디로 생성된 빈이 없는 경우는
				클래스 이름을 이용해서 빈을 찾아서 자동의존주입을 하게된다.
				
			3. 같은 이름으로 빈을 만들게 되면 에러가 발생한다.
			
----------------------------------------------------------------------------------------------------

데이터베이스작업

	myBatis 연동
	==> 데이터베이스 처리를 좀더 편하게 도와주는 프레임워크의일종
		커넥션 풀에서 커넥션을 얻어오는 방법이나
		질의명령 생성을 좀 더 편하게 해주고
		질의명령을 실행한 결과(Model)을 만드는 방법 등등을
		개발자의 손을 거치지 않고 실행해주는 기능을 가지고있다.
			
		방법 ]
			1. 라이브러리 등록
			2. myBatis 환경설정
				==> /WEB-INF/spring/root-context.xml
					여기서는 데이터베이스 셋팅과 환경설정 파일의 경로를 지정
					추가적으로 질의명령을 작성하는 xml 파일(mapper) 를 등록시킬 수 있다.
			3. /resources/mybatis-config.xml
				에서
					마이바티스 기본 행동방식
					자바클래스의 별칭 생성
					추가적으로 질의명령을 작성하는 mapper(***SQL.xml)의 경로를 기술
				이 파일은 마이바티스의 configuration 스키마를 이용해서 작성해야 한다.
					
			4. /resources/mapper/***SQL.xml 파일의 질의명령을 작성
			
			
			
			
			
			
			
			
			
			
			
			
			
			
